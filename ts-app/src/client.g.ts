// This file was autogenerated by @arrirpc/codegen-ts. Do not modify directly.
// For more information visit https://github.com/modiimedia/arri

/* eslint-disable */
// @ts-nocheck
import {
  ArriEnumValidator,
  ArriModelValidator,
  arriRequest,
  INT8_MAX,
  INT8_MIN,
  INT16_MAX,
  INT16_MIN,
  INT32_MAX,
  INT32_MIN,
  INT64_MAX,
  INT64_MIN,
  isObject,
  serializeString,
  UINT8_MAX,
  UINT16_MAX,
  UINT32_MAX,
  UINT64_MAX,
} from "@arrirpc/client";

type HeaderMap = Record<string, string | undefined>;
export class MyClient {
  private readonly _baseUrl: string;
  private readonly _headers: HeaderMap | (() => HeaderMap | Promise<HeaderMap>);

  constructor(
    options: {
      baseUrl?: string;
      headers?: HeaderMap | (() => HeaderMap | Promise<HeaderMap>);
    } = {},
  ) {
    this._baseUrl = options.baseUrl ?? "";
    this._headers = options.headers ?? {};
  }
  async sayHello(params: SayHelloParams): Promise<SayHelloResponse> {
    return arriRequest<SayHelloResponse, SayHelloParams>({
      url: `${this._baseUrl}/say-hello`,
      method: "post",
      headers: this._headers,
      params: params,
      responseFromJson: $$SayHelloResponse.fromJson,
      responseFromString: $$SayHelloResponse.fromJsonString,
      serializer: $$SayHelloParams.toJsonString,
      clientVersion: "1",
    });
  }
}

export interface SayHelloParams {
  name: string;
}
export const $$SayHelloParams: ArriModelValidator<SayHelloParams> = {
  new(): SayHelloParams {
    return {
      name: "",
    };
  },
  validate(input): input is SayHelloParams {
    return isObject(input) && typeof input.name === "string";
  },
  fromJson(input): SayHelloParams {
    let _name: string;
    if (typeof input.name === "string") {
      _name = input.name;
    } else {
      _name = "";
    }
    return {
      name: _name,
    };
  },
  fromJsonString(input): SayHelloParams {
    return $$SayHelloParams.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"name":';
    json += serializeString(input.name);
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`name=${input.name}`);
    return queryParts.join("&");
  },
};

export interface SayHelloResponse {
  message: string;
}
export const $$SayHelloResponse: ArriModelValidator<SayHelloResponse> = {
  new(): SayHelloResponse {
    return {
      message: "",
    };
  },
  validate(input): input is SayHelloResponse {
    return isObject(input) && typeof input.message === "string";
  },
  fromJson(input): SayHelloResponse {
    let _message: string;
    if (typeof input.message === "string") {
      _message = input.message;
    } else {
      _message = "";
    }
    return {
      message: _message,
    };
  },
  fromJsonString(input): SayHelloResponse {
    return $$SayHelloResponse.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"message":';
    json += serializeString(input.message);
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`message=${input.message}`);
    return queryParts.join("&");
  },
};
